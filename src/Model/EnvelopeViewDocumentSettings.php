<?php
/**
 * EnvelopeViewDocumentSettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The Docusign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
use DocuSign\eSign\ObjectSerializer;

/**
 * EnvelopeViewDocumentSettings Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\eSign
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The Docusign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EnvelopeViewDocumentSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'envelopeViewDocumentSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'show_edit_documents' => '?string',
        'show_edit_document_visibility' => '?string',
        'show_edit_pages' => '?string',
        'show_save_as_document_custom_field' => '?string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'show_edit_documents' => null,
        'show_edit_document_visibility' => null,
        'show_edit_pages' => null,
        'show_save_as_document_custom_field' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'show_edit_documents' => 'showEditDocuments',
        'show_edit_document_visibility' => 'showEditDocumentVisibility',
        'show_edit_pages' => 'showEditPages',
        'show_save_as_document_custom_field' => 'showSaveAsDocumentCustomField'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'show_edit_documents' => 'setShowEditDocuments',
        'show_edit_document_visibility' => 'setShowEditDocumentVisibility',
        'show_edit_pages' => 'setShowEditPages',
        'show_save_as_document_custom_field' => 'setShowSaveAsDocumentCustomField'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'show_edit_documents' => 'getShowEditDocuments',
        'show_edit_document_visibility' => 'getShowEditDocumentVisibility',
        'show_edit_pages' => 'getShowEditPages',
        'show_save_as_document_custom_field' => 'getShowSaveAsDocumentCustomField'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['show_edit_documents'] = isset($data['show_edit_documents']) ? $data['show_edit_documents'] : null;
        $this->container['show_edit_document_visibility'] = isset($data['show_edit_document_visibility']) ? $data['show_edit_document_visibility'] : null;
        $this->container['show_edit_pages'] = isset($data['show_edit_pages']) ? $data['show_edit_pages'] : null;
        $this->container['show_save_as_document_custom_field'] = isset($data['show_save_as_document_custom_field']) ? $data['show_save_as_document_custom_field'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets show_edit_documents
     *
     * @return ?string
     */
    public function getShowEditDocuments()
    {
        return $this->container['show_edit_documents'];
    }

    /**
     * Sets show_edit_documents
     *
     * @param ?string $show_edit_documents 
     *
     * @return $this
     */
    public function setShowEditDocuments($show_edit_documents)
    {
        $this->container['show_edit_documents'] = $show_edit_documents;

        return $this;
    }

    /**
     * Gets show_edit_document_visibility
     *
     * @return ?string
     */
    public function getShowEditDocumentVisibility()
    {
        return $this->container['show_edit_document_visibility'];
    }

    /**
     * Sets show_edit_document_visibility
     *
     * @param ?string $show_edit_document_visibility 
     *
     * @return $this
     */
    public function setShowEditDocumentVisibility($show_edit_document_visibility)
    {
        $this->container['show_edit_document_visibility'] = $show_edit_document_visibility;

        return $this;
    }

    /**
     * Gets show_edit_pages
     *
     * @return ?string
     */
    public function getShowEditPages()
    {
        return $this->container['show_edit_pages'];
    }

    /**
     * Sets show_edit_pages
     *
     * @param ?string $show_edit_pages 
     *
     * @return $this
     */
    public function setShowEditPages($show_edit_pages)
    {
        $this->container['show_edit_pages'] = $show_edit_pages;

        return $this;
    }

    /**
     * Gets show_save_as_document_custom_field
     *
     * @return ?string
     */
    public function getShowSaveAsDocumentCustomField()
    {
        return $this->container['show_save_as_document_custom_field'];
    }

    /**
     * Sets show_save_as_document_custom_field
     *
     * @param ?string $show_save_as_document_custom_field 
     *
     * @return $this
     */
    public function setShowSaveAsDocumentCustomField($show_save_as_document_custom_field)
    {
        $this->container['show_save_as_document_custom_field'] = $show_save_as_document_custom_field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

