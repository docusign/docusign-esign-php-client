<?php
/**
 * RecipientSignatureProvider
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The Docusign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
use DocuSign\eSign\ObjectSerializer;

/**
 * RecipientSignatureProvider Class Doc Comment
 *
 * @category    Class
 * @description An Electronic or Standards Based Signature (digital signature) provider for the signer to use. [More information](/docs/esign-rest-api/esign101/concepts/standards-based-signatures/).
 * @package     DocuSign\eSign
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The Docusign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RecipientSignatureProvider implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'recipientSignatureProvider';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'seal_documents_with_tabs_only' => '?string',
        'seal_name' => '?string',
        'signature_provider_name' => '?string',
        'signature_provider_name_metadata' => '\DocuSign\eSign\Model\PropertyMetadata',
        'signature_provider_options' => '\DocuSign\eSign\Model\RecipientSignatureProviderOptions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'seal_documents_with_tabs_only' => null,
        'seal_name' => null,
        'signature_provider_name' => null,
        'signature_provider_name_metadata' => null,
        'signature_provider_options' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'seal_documents_with_tabs_only' => 'sealDocumentsWithTabsOnly',
        'seal_name' => 'sealName',
        'signature_provider_name' => 'signatureProviderName',
        'signature_provider_name_metadata' => 'signatureProviderNameMetadata',
        'signature_provider_options' => 'signatureProviderOptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'seal_documents_with_tabs_only' => 'setSealDocumentsWithTabsOnly',
        'seal_name' => 'setSealName',
        'signature_provider_name' => 'setSignatureProviderName',
        'signature_provider_name_metadata' => 'setSignatureProviderNameMetadata',
        'signature_provider_options' => 'setSignatureProviderOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'seal_documents_with_tabs_only' => 'getSealDocumentsWithTabsOnly',
        'seal_name' => 'getSealName',
        'signature_provider_name' => 'getSignatureProviderName',
        'signature_provider_name_metadata' => 'getSignatureProviderNameMetadata',
        'signature_provider_options' => 'getSignatureProviderOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['seal_documents_with_tabs_only'] = isset($data['seal_documents_with_tabs_only']) ? $data['seal_documents_with_tabs_only'] : null;
        $this->container['seal_name'] = isset($data['seal_name']) ? $data['seal_name'] : null;
        $this->container['signature_provider_name'] = isset($data['signature_provider_name']) ? $data['signature_provider_name'] : null;
        $this->container['signature_provider_name_metadata'] = isset($data['signature_provider_name_metadata']) ? $data['signature_provider_name_metadata'] : null;
        $this->container['signature_provider_options'] = isset($data['signature_provider_options']) ? $data['signature_provider_options'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets seal_documents_with_tabs_only
     *
     * @return ?string
     */
    public function getSealDocumentsWithTabsOnly()
    {
        return $this->container['seal_documents_with_tabs_only'];
    }

    /**
     * Sets seal_documents_with_tabs_only
     *
     * @param ?string $seal_documents_with_tabs_only 
     *
     * @return $this
     */
    public function setSealDocumentsWithTabsOnly($seal_documents_with_tabs_only)
    {
        $this->container['seal_documents_with_tabs_only'] = $seal_documents_with_tabs_only;

        return $this;
    }

    /**
     * Gets seal_name
     *
     * @return ?string
     */
    public function getSealName()
    {
        return $this->container['seal_name'];
    }

    /**
     * Sets seal_name
     *
     * @param ?string $seal_name 
     *
     * @return $this
     */
    public function setSealName($seal_name)
    {
        $this->container['seal_name'] = $seal_name;

        return $this;
    }

    /**
     * Gets signature_provider_name
     *
     * @return ?string
     */
    public function getSignatureProviderName()
    {
        return $this->container['signature_provider_name'];
    }

    /**
     * Sets signature_provider_name
     *
     * @param ?string $signature_provider_name 
     *
     * @return $this
     */
    public function setSignatureProviderName($signature_provider_name)
    {
        $this->container['signature_provider_name'] = $signature_provider_name;

        return $this;
    }

    /**
     * Gets signature_provider_name_metadata
     *
     * @return \DocuSign\eSign\Model\PropertyMetadata
     */
    public function getSignatureProviderNameMetadata()
    {
        return $this->container['signature_provider_name_metadata'];
    }

    /**
     * Sets signature_provider_name_metadata
     *
     * @param \DocuSign\eSign\Model\PropertyMetadata $signature_provider_name_metadata Metadata that indicates whether the `signatureProviderName` property is editable.
     *
     * @return $this
     */
    public function setSignatureProviderNameMetadata($signature_provider_name_metadata)
    {
        $this->container['signature_provider_name_metadata'] = $signature_provider_name_metadata;

        return $this;
    }

    /**
     * Gets signature_provider_options
     *
     * @return \DocuSign\eSign\Model\RecipientSignatureProviderOptions
     */
    public function getSignatureProviderOptions()
    {
        return $this->container['signature_provider_options'];
    }

    /**
     * Sets signature_provider_options
     *
     * @param \DocuSign\eSign\Model\RecipientSignatureProviderOptions $signature_provider_options Not applicable for this object.
     *
     * @return $this
     */
    public function setSignatureProviderOptions($signature_provider_options)
    {
        $this->container['signature_provider_options'] = $signature_provider_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

