<?php
/**
 * RecipientTokenClientURLs
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The Docusign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;
use DocuSign\eSign\ObjectSerializer;

/**
 * RecipientTokenClientURLs Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\eSign
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The Docusign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RecipientTokenClientURLs implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'recipientTokenClientURLs';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'on_access_code_failed' => '?string',
        'on_cancel' => '?string',
        'on_decline' => '?string',
        'on_exception' => '?string',
        'on_fax_pending' => '?string',
        'on_id_check_failed' => '?string',
        'on_session_timeout' => '?string',
        'on_signing_complete' => '?string',
        'on_ttl_expired' => '?string',
        'on_viewing_complete' => '?string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'on_access_code_failed' => null,
        'on_cancel' => null,
        'on_decline' => null,
        'on_exception' => null,
        'on_fax_pending' => null,
        'on_id_check_failed' => null,
        'on_session_timeout' => null,
        'on_signing_complete' => null,
        'on_ttl_expired' => null,
        'on_viewing_complete' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'on_access_code_failed' => 'onAccessCodeFailed',
        'on_cancel' => 'onCancel',
        'on_decline' => 'onDecline',
        'on_exception' => 'onException',
        'on_fax_pending' => 'onFaxPending',
        'on_id_check_failed' => 'onIdCheckFailed',
        'on_session_timeout' => 'onSessionTimeout',
        'on_signing_complete' => 'onSigningComplete',
        'on_ttl_expired' => 'onTTLExpired',
        'on_viewing_complete' => 'onViewingComplete'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'on_access_code_failed' => 'setOnAccessCodeFailed',
        'on_cancel' => 'setOnCancel',
        'on_decline' => 'setOnDecline',
        'on_exception' => 'setOnException',
        'on_fax_pending' => 'setOnFaxPending',
        'on_id_check_failed' => 'setOnIdCheckFailed',
        'on_session_timeout' => 'setOnSessionTimeout',
        'on_signing_complete' => 'setOnSigningComplete',
        'on_ttl_expired' => 'setOnTtlExpired',
        'on_viewing_complete' => 'setOnViewingComplete'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'on_access_code_failed' => 'getOnAccessCodeFailed',
        'on_cancel' => 'getOnCancel',
        'on_decline' => 'getOnDecline',
        'on_exception' => 'getOnException',
        'on_fax_pending' => 'getOnFaxPending',
        'on_id_check_failed' => 'getOnIdCheckFailed',
        'on_session_timeout' => 'getOnSessionTimeout',
        'on_signing_complete' => 'getOnSigningComplete',
        'on_ttl_expired' => 'getOnTtlExpired',
        'on_viewing_complete' => 'getOnViewingComplete'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['on_access_code_failed'] = isset($data['on_access_code_failed']) ? $data['on_access_code_failed'] : null;
        $this->container['on_cancel'] = isset($data['on_cancel']) ? $data['on_cancel'] : null;
        $this->container['on_decline'] = isset($data['on_decline']) ? $data['on_decline'] : null;
        $this->container['on_exception'] = isset($data['on_exception']) ? $data['on_exception'] : null;
        $this->container['on_fax_pending'] = isset($data['on_fax_pending']) ? $data['on_fax_pending'] : null;
        $this->container['on_id_check_failed'] = isset($data['on_id_check_failed']) ? $data['on_id_check_failed'] : null;
        $this->container['on_session_timeout'] = isset($data['on_session_timeout']) ? $data['on_session_timeout'] : null;
        $this->container['on_signing_complete'] = isset($data['on_signing_complete']) ? $data['on_signing_complete'] : null;
        $this->container['on_ttl_expired'] = isset($data['on_ttl_expired']) ? $data['on_ttl_expired'] : null;
        $this->container['on_viewing_complete'] = isset($data['on_viewing_complete']) ? $data['on_viewing_complete'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets on_access_code_failed
     *
     * @return ?string
     */
    public function getOnAccessCodeFailed()
    {
        return $this->container['on_access_code_failed'];
    }

    /**
     * Sets on_access_code_failed
     *
     * @param ?string $on_access_code_failed 
     *
     * @return $this
     */
    public function setOnAccessCodeFailed($on_access_code_failed)
    {
        $this->container['on_access_code_failed'] = $on_access_code_failed;

        return $this;
    }

    /**
     * Gets on_cancel
     *
     * @return ?string
     */
    public function getOnCancel()
    {
        return $this->container['on_cancel'];
    }

    /**
     * Sets on_cancel
     *
     * @param ?string $on_cancel 
     *
     * @return $this
     */
    public function setOnCancel($on_cancel)
    {
        $this->container['on_cancel'] = $on_cancel;

        return $this;
    }

    /**
     * Gets on_decline
     *
     * @return ?string
     */
    public function getOnDecline()
    {
        return $this->container['on_decline'];
    }

    /**
     * Sets on_decline
     *
     * @param ?string $on_decline 
     *
     * @return $this
     */
    public function setOnDecline($on_decline)
    {
        $this->container['on_decline'] = $on_decline;

        return $this;
    }

    /**
     * Gets on_exception
     *
     * @return ?string
     */
    public function getOnException()
    {
        return $this->container['on_exception'];
    }

    /**
     * Sets on_exception
     *
     * @param ?string $on_exception 
     *
     * @return $this
     */
    public function setOnException($on_exception)
    {
        $this->container['on_exception'] = $on_exception;

        return $this;
    }

    /**
     * Gets on_fax_pending
     *
     * @return ?string
     */
    public function getOnFaxPending()
    {
        return $this->container['on_fax_pending'];
    }

    /**
     * Sets on_fax_pending
     *
     * @param ?string $on_fax_pending 
     *
     * @return $this
     */
    public function setOnFaxPending($on_fax_pending)
    {
        $this->container['on_fax_pending'] = $on_fax_pending;

        return $this;
    }

    /**
     * Gets on_id_check_failed
     *
     * @return ?string
     */
    public function getOnIdCheckFailed()
    {
        return $this->container['on_id_check_failed'];
    }

    /**
     * Sets on_id_check_failed
     *
     * @param ?string $on_id_check_failed 
     *
     * @return $this
     */
    public function setOnIdCheckFailed($on_id_check_failed)
    {
        $this->container['on_id_check_failed'] = $on_id_check_failed;

        return $this;
    }

    /**
     * Gets on_session_timeout
     *
     * @return ?string
     */
    public function getOnSessionTimeout()
    {
        return $this->container['on_session_timeout'];
    }

    /**
     * Sets on_session_timeout
     *
     * @param ?string $on_session_timeout 
     *
     * @return $this
     */
    public function setOnSessionTimeout($on_session_timeout)
    {
        $this->container['on_session_timeout'] = $on_session_timeout;

        return $this;
    }

    /**
     * Gets on_signing_complete
     *
     * @return ?string
     */
    public function getOnSigningComplete()
    {
        return $this->container['on_signing_complete'];
    }

    /**
     * Sets on_signing_complete
     *
     * @param ?string $on_signing_complete 
     *
     * @return $this
     */
    public function setOnSigningComplete($on_signing_complete)
    {
        $this->container['on_signing_complete'] = $on_signing_complete;

        return $this;
    }

    /**
     * Gets on_ttl_expired
     *
     * @return ?string
     */
    public function getOnTtlExpired()
    {
        return $this->container['on_ttl_expired'];
    }

    /**
     * Sets on_ttl_expired
     *
     * @param ?string $on_ttl_expired 
     *
     * @return $this
     */
    public function setOnTtlExpired($on_ttl_expired)
    {
        $this->container['on_ttl_expired'] = $on_ttl_expired;

        return $this;
    }

    /**
     * Gets on_viewing_complete
     *
     * @return ?string
     */
    public function getOnViewingComplete()
    {
        return $this->container['on_viewing_complete'];
    }

    /**
     * Sets on_viewing_complete
     *
     * @param ?string $on_viewing_complete 
     *
     * @return $this
     */
    public function setOnViewingComplete($on_viewing_complete)
    {
        $this->container['on_viewing_complete'] = $on_viewing_complete;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

