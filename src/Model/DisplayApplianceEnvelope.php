<?php
/**
 * DisplayApplianceEnvelope
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;

/**
 * DisplayApplianceEnvelope Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\eSign
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DisplayApplianceEnvelope implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'displayApplianceEnvelope';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'add_demo_stamp' => 'bool',
        'allow_multiple_attachments' => 'bool',
        'burn_default_tab_data' => 'bool',
        'convert_pdf_fields' => 'bool',
        'envelope_id' => 'string',
        'envelope_type' => 'string',
        'include_sigs_before_complete' => 'bool',
        'is_concat_mode' => 'bool',
        'is_envelope_id_stamping_enabled' => 'bool',
        'pdf_form_conversion_font_scale100' => 'bool',
        'should_flatten' => 'bool',
        'show_envelope_changes' => 'bool',
        'sign_online' => 'bool',
        'status' => 'string',
        'user_id' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'add_demo_stamp' => 'addDemoStamp',
        'allow_multiple_attachments' => 'allowMultipleAttachments',
        'burn_default_tab_data' => 'burnDefaultTabData',
        'convert_pdf_fields' => 'convertPdfFields',
        'envelope_id' => 'envelopeId',
        'envelope_type' => 'envelopeType',
        'include_sigs_before_complete' => 'includeSigsBeforeComplete',
        'is_concat_mode' => 'isConcatMode',
        'is_envelope_id_stamping_enabled' => 'isEnvelopeIDStampingEnabled',
        'pdf_form_conversion_font_scale100' => 'pdfFormConversionFontScale100',
        'should_flatten' => 'shouldFlatten',
        'show_envelope_changes' => 'showEnvelopeChanges',
        'sign_online' => 'signOnline',
        'status' => 'status',
        'user_id' => 'userId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'add_demo_stamp' => 'setAddDemoStamp',
        'allow_multiple_attachments' => 'setAllowMultipleAttachments',
        'burn_default_tab_data' => 'setBurnDefaultTabData',
        'convert_pdf_fields' => 'setConvertPdfFields',
        'envelope_id' => 'setEnvelopeId',
        'envelope_type' => 'setEnvelopeType',
        'include_sigs_before_complete' => 'setIncludeSigsBeforeComplete',
        'is_concat_mode' => 'setIsConcatMode',
        'is_envelope_id_stamping_enabled' => 'setIsEnvelopeIdStampingEnabled',
        'pdf_form_conversion_font_scale100' => 'setPdfFormConversionFontScale100',
        'should_flatten' => 'setShouldFlatten',
        'show_envelope_changes' => 'setShowEnvelopeChanges',
        'sign_online' => 'setSignOnline',
        'status' => 'setStatus',
        'user_id' => 'setUserId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'add_demo_stamp' => 'getAddDemoStamp',
        'allow_multiple_attachments' => 'getAllowMultipleAttachments',
        'burn_default_tab_data' => 'getBurnDefaultTabData',
        'convert_pdf_fields' => 'getConvertPdfFields',
        'envelope_id' => 'getEnvelopeId',
        'envelope_type' => 'getEnvelopeType',
        'include_sigs_before_complete' => 'getIncludeSigsBeforeComplete',
        'is_concat_mode' => 'getIsConcatMode',
        'is_envelope_id_stamping_enabled' => 'getIsEnvelopeIdStampingEnabled',
        'pdf_form_conversion_font_scale100' => 'getPdfFormConversionFontScale100',
        'should_flatten' => 'getShouldFlatten',
        'show_envelope_changes' => 'getShowEnvelopeChanges',
        'sign_online' => 'getSignOnline',
        'status' => 'getStatus',
        'user_id' => 'getUserId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['add_demo_stamp'] = isset($data['add_demo_stamp']) ? $data['add_demo_stamp'] : null;
        $this->container['allow_multiple_attachments'] = isset($data['allow_multiple_attachments']) ? $data['allow_multiple_attachments'] : null;
        $this->container['burn_default_tab_data'] = isset($data['burn_default_tab_data']) ? $data['burn_default_tab_data'] : null;
        $this->container['convert_pdf_fields'] = isset($data['convert_pdf_fields']) ? $data['convert_pdf_fields'] : null;
        $this->container['envelope_id'] = isset($data['envelope_id']) ? $data['envelope_id'] : null;
        $this->container['envelope_type'] = isset($data['envelope_type']) ? $data['envelope_type'] : null;
        $this->container['include_sigs_before_complete'] = isset($data['include_sigs_before_complete']) ? $data['include_sigs_before_complete'] : null;
        $this->container['is_concat_mode'] = isset($data['is_concat_mode']) ? $data['is_concat_mode'] : null;
        $this->container['is_envelope_id_stamping_enabled'] = isset($data['is_envelope_id_stamping_enabled']) ? $data['is_envelope_id_stamping_enabled'] : null;
        $this->container['pdf_form_conversion_font_scale100'] = isset($data['pdf_form_conversion_font_scale100']) ? $data['pdf_form_conversion_font_scale100'] : null;
        $this->container['should_flatten'] = isset($data['should_flatten']) ? $data['should_flatten'] : null;
        $this->container['show_envelope_changes'] = isset($data['show_envelope_changes']) ? $data['show_envelope_changes'] : null;
        $this->container['sign_online'] = isset($data['sign_online']) ? $data['sign_online'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets add_demo_stamp
     * @return bool
     */
    public function getAddDemoStamp()
    {
        return $this->container['add_demo_stamp'];
    }

    /**
     * Sets add_demo_stamp
     * @param bool $add_demo_stamp 
     * @return $this
     */
    public function setAddDemoStamp($add_demo_stamp)
    {
        $this->container['add_demo_stamp'] = $add_demo_stamp;

        return $this;
    }

    /**
     * Gets allow_multiple_attachments
     * @return bool
     */
    public function getAllowMultipleAttachments()
    {
        return $this->container['allow_multiple_attachments'];
    }

    /**
     * Sets allow_multiple_attachments
     * @param bool $allow_multiple_attachments 
     * @return $this
     */
    public function setAllowMultipleAttachments($allow_multiple_attachments)
    {
        $this->container['allow_multiple_attachments'] = $allow_multiple_attachments;

        return $this;
    }

    /**
     * Gets burn_default_tab_data
     * @return bool
     */
    public function getBurnDefaultTabData()
    {
        return $this->container['burn_default_tab_data'];
    }

    /**
     * Sets burn_default_tab_data
     * @param bool $burn_default_tab_data 
     * @return $this
     */
    public function setBurnDefaultTabData($burn_default_tab_data)
    {
        $this->container['burn_default_tab_data'] = $burn_default_tab_data;

        return $this;
    }

    /**
     * Gets convert_pdf_fields
     * @return bool
     */
    public function getConvertPdfFields()
    {
        return $this->container['convert_pdf_fields'];
    }

    /**
     * Sets convert_pdf_fields
     * @param bool $convert_pdf_fields 
     * @return $this
     */
    public function setConvertPdfFields($convert_pdf_fields)
    {
        $this->container['convert_pdf_fields'] = $convert_pdf_fields;

        return $this;
    }

    /**
     * Gets envelope_id
     * @return string
     */
    public function getEnvelopeId()
    {
        return $this->container['envelope_id'];
    }

    /**
     * Sets envelope_id
     * @param string $envelope_id The envelope ID of the envelope status that failed to post.
     * @return $this
     */
    public function setEnvelopeId($envelope_id)
    {
        $this->container['envelope_id'] = $envelope_id;

        return $this;
    }

    /**
     * Gets envelope_type
     * @return string
     */
    public function getEnvelopeType()
    {
        return $this->container['envelope_type'];
    }

    /**
     * Sets envelope_type
     * @param string $envelope_type 
     * @return $this
     */
    public function setEnvelopeType($envelope_type)
    {
        $this->container['envelope_type'] = $envelope_type;

        return $this;
    }

    /**
     * Gets include_sigs_before_complete
     * @return bool
     */
    public function getIncludeSigsBeforeComplete()
    {
        return $this->container['include_sigs_before_complete'];
    }

    /**
     * Sets include_sigs_before_complete
     * @param bool $include_sigs_before_complete 
     * @return $this
     */
    public function setIncludeSigsBeforeComplete($include_sigs_before_complete)
    {
        $this->container['include_sigs_before_complete'] = $include_sigs_before_complete;

        return $this;
    }

    /**
     * Gets is_concat_mode
     * @return bool
     */
    public function getIsConcatMode()
    {
        return $this->container['is_concat_mode'];
    }

    /**
     * Sets is_concat_mode
     * @param bool $is_concat_mode 
     * @return $this
     */
    public function setIsConcatMode($is_concat_mode)
    {
        $this->container['is_concat_mode'] = $is_concat_mode;

        return $this;
    }

    /**
     * Gets is_envelope_id_stamping_enabled
     * @return bool
     */
    public function getIsEnvelopeIdStampingEnabled()
    {
        return $this->container['is_envelope_id_stamping_enabled'];
    }

    /**
     * Sets is_envelope_id_stamping_enabled
     * @param bool $is_envelope_id_stamping_enabled 
     * @return $this
     */
    public function setIsEnvelopeIdStampingEnabled($is_envelope_id_stamping_enabled)
    {
        $this->container['is_envelope_id_stamping_enabled'] = $is_envelope_id_stamping_enabled;

        return $this;
    }

    /**
     * Gets pdf_form_conversion_font_scale100
     * @return bool
     */
    public function getPdfFormConversionFontScale100()
    {
        return $this->container['pdf_form_conversion_font_scale100'];
    }

    /**
     * Sets pdf_form_conversion_font_scale100
     * @param bool $pdf_form_conversion_font_scale100 
     * @return $this
     */
    public function setPdfFormConversionFontScale100($pdf_form_conversion_font_scale100)
    {
        $this->container['pdf_form_conversion_font_scale100'] = $pdf_form_conversion_font_scale100;

        return $this;
    }

    /**
     * Gets should_flatten
     * @return bool
     */
    public function getShouldFlatten()
    {
        return $this->container['should_flatten'];
    }

    /**
     * Sets should_flatten
     * @param bool $should_flatten 
     * @return $this
     */
    public function setShouldFlatten($should_flatten)
    {
        $this->container['should_flatten'] = $should_flatten;

        return $this;
    }

    /**
     * Gets show_envelope_changes
     * @return bool
     */
    public function getShowEnvelopeChanges()
    {
        return $this->container['show_envelope_changes'];
    }

    /**
     * Sets show_envelope_changes
     * @param bool $show_envelope_changes 
     * @return $this
     */
    public function setShowEnvelopeChanges($show_envelope_changes)
    {
        $this->container['show_envelope_changes'] = $show_envelope_changes;

        return $this;
    }

    /**
     * Gets sign_online
     * @return bool
     */
    public function getSignOnline()
    {
        return $this->container['sign_online'];
    }

    /**
     * Sets sign_online
     * @param bool $sign_online 
     * @return $this
     */
    public function setSignOnline($sign_online)
    {
        $this->container['sign_online'] = $sign_online;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets user_id
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param string $user_id 
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
    }
}


